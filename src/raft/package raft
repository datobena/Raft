package raft

//
// this is an outline of the API that raft must expose to
// the service (or tester). see comments below for
// each of these functions for more details.
//
// rf = Make(...)
//   create a new Raft server.
// rf.Start(command interface{}) (index, term, isleader)
//   start agreement on a new log entry
// rf.GetState() (term, isLeader)
//   ask a Raft for its current term, and whether it thinks it is leader
// ApplyMsg
//   each time a new entry is committed to the log, each Raft peer
//   should send an ApplyMsg to the service (or tester)
//   in the same server.
//

import (
	//	"bytes"
	"bytes"
	"math/rand"
	"sync"
	"sync/atomic"
	"time"

	//	"6.5840/labgob"
	"6.5840/labgob"
	"6.5840/labrpc"
)

// as each Raft peer becomes aware that successive log entries are
// committed, the peer should send an ApplyMsg to the service (or
// tester) on the same server, via the applyCh passed to Make(). set
// CommandValid to true to indicate that the ApplyMsg contains a newly
// committed log entry.
//
// in part 2D you'll want to send other kinds of messages (e.g.,
// snapshots) on the applyCh, but set CommandValid to false for these
// other uses.

const (
	FOLLOWER = iota
	CANDIDATE
	LEADER
)

type ApplyMsg struct {
	CommandValid bool
	Command      interface{}
	CommandIndex int

	// For 2D:
	SnapshotValid bool
	Snapshot      []byte
	SnapshotTerm  int
	SnapshotIndex int
}
type Entry struct {
	Term    int
	Command interface{}
}

// A Go object implementing a single Raft peer.
type Raft struct {
	mu        sync.Mutex          // Lock to protect shared access to this peer's state
	peers     []*labrpc.ClientEnd // RPC end points of all peers
	persister *Persister          // Object to hold this peer's persisted state
	me        int                 // this peer's index into peers[]
	dead      int32               // set by Kill()

	// Your data here (2A, 2B, 2C).
	// Look at the paper's Figure 2 for a description of what
	// state a Raft server must maintain.

	//(2A)
	currentTerm       atomic.Int32
	voted             atomic.Bool
	logs              []Entry
	heartbeatReceived atomic.Bool
	state             atomic.Int32
	commitIdx         int
	lastApplied       atomic.Int32
	nextIdx           []int
	matchIdx          []int
	applyCh           chan ApplyMsg
}

// return currentTerm and whether this server
// believes it is the leader.
func (rf *Raft) GetState() (int, bool) {
	// Your code here (2A).
	rf.mu.Lock()
	defer rf.mu.Unlock()
	return int(rf.currentTerm.Load()), rf.state.Load() == LEADER
}

// save Raft's persistent state to stable storage,
// where it can later be retrieved after a crash and restart.
// see paper's Figure 2 for a description of what should be persistent.
// before you've implemented snapshots, you should pass nil as the
// second argument to persister.Save().
// after you've implemented snapshots, pass the current snapshot
// (or nil if there's not yet a snapshot).
func (rf *Raft) persist() {
	// Your code here (2C).
	// Example:
	w := new(bytes.Buffer)
	e := labgob.NewEncoder(w)
	if e.Encode(int(rf.currentTerm.Load())) != nil || e.Encode(rf.voted.Load()) != nil || e.Encode(rf.logs) != nil {
		println("failed to encode")
		return
	}
	raftstate := w.Bytes()
	rf.persister.Save(raftstate, nil)
}

// restore previously persisted state.
func (rf *Raft) readPersist(data []byte) {
	if data == nil || len(data) < 1 { // bootstrap without any state?
		return
	}
	// Your code here (2C).
	// Example:
	rf.mu.Lock()
	defer rf.mu.Unlock()
	r := bytes.NewBuffer(data)
	d := labgob.NewDecoder(r)
	var currentTerm int
	var voted bool
	var logs []Entry
	if d.Decode(&currentTerm) != nil ||
		d.Decode(&voted) != nil ||
		d.Decode(&logs) != nil {
		print("failed to decode")
		return
	} else {
		rf.currentTerm.Store(int32(currentTerm))
		rf.voted.Store(voted)
		rf.logs = logs
	}
}

// the service says it has created a snapshot that has
// all info up to and including index. this means the
// service no longer needs the log through (and including)
// that index. Raft should now trim its log as much as possible.
func (rf *Raft) Snapshot(index int, snapshot []byte) {
	// Your code here (2D).

}

// example RequestVote RPC arguments structure.
// field names must start with capital letters!
type RequestVoteArgs struct {
	// Your data here (2A, 2B).
	CandidateID int
	Term        int
	LastLogIdx  int
	LastLogTerm int
}

// example RequestVote RPC reply structure.
// field names must start with capital letters!
type RequestVoteReply struct {
	// Your data here (2A).
	VotedYes  bool
	VoterTerm int
}

// (2A)
type AppendEntriesArgs struct {
	LeaderTerm   int
	LeaderID     int
	PrevLogIdx   int
	PrevLogTerm  int
	Entries      []Entry
	LeaderCommit int
}
type AppendEntriesReply struct {
	FollowerLastLogTerm int
	FollowerTerm        int
	Success             bool
}

// example RequestVote RPC handler.
func (rf *Raft) RequestVote(args *RequestVoteArgs, reply *RequestVoteReply) {
	// Your code here (2A, 2B).
	rf.mu.Lock()
	defer rf.mu.Unlock()
	voted := rf.voted.Load()
	curTerm := int(rf.currentTerm.Load())
	candidateTerm := args.Term
	if ((candidateTerm > curTerm) || (!voted && candidateTerm == curTerm)) &&
		(rf.logs[len(rf.logs)-1].Term < args.LastLogTerm ||
			(rf.logs[len(rf.logs)-1].Term == args.LastLogTerm && len(rf.logs) <= args.LastLogIdx+1)) {
		DPrintf("*election* candidateTerm: %d, curTerm: %d, voted: %v", candidateTerm, curTerm, voted)
		DPrintf("*election* voterLogs: %v", rf.logs)
		DPrintf("*election* candidateLastLogTerm: %d and index: %d", args.LastLogTerm, args.LastLogIdx)
		reply.VotedYes = true
		rf.voted.Store(true)
		rf.currentTerm.Store(int32(candidateTerm))
		rf.state.Store(FOLLOWER)

	} else {
		reply.VotedYes = false
	}
	reply.VoterTerm = int(rf.currentTerm.Load())
	DPrintf("*election* voter: %d, candidate: %d, res: %v", rf.me, args.CandidateID, reply.VotedYes)
}

func (rf *Raft) AppendEntries(args *AppendEntriesArgs, reply *AppendEntriesReply) {
	rf.mu.Lock()
	defer rf.mu.Unlock()
	DPrintf("*log* PeerID: %d\n *log* peerLogs: %v\n *log* appendLogs: %v", rf.me, rf.logs, args.Entries)
	// println("length of entries slice", len(args.Entries))
	DPrintf("*Append* leader: %d, follower: %d", args.LeaderID, rf.me)
	reply.FollowerTerm = int(rf.currentTerm.Load())
	if args.LeaderTerm < reply.FollowerTerm {
		DPrintf("*Append* args.LeaderTerm < int(rf.currentTerm.Load()) == %v", args.LeaderTerm < reply.FollowerTerm)
		reply.Success = false
		return
	}
	if len(rf.logs) <= args.PrevLogIdx || rf.logs[args.PrevLogIdx].Term != args.PrevLogTerm {
		DPrintf("*Append* len(rf.logs) <= args.PrevLogIdx == %v", len(rf.logs) <= args.PrevLogIdx)
		rf.heartbeatReceived.Store(true)
		reply.FollowerLastLogTerm = rf.logs[len(rf.logs)-1].Term
		reply.Success = false
	} else {
		DPrintf("*Append* Append accepted by peerID: %d from leaderID: %d", rf.me, args.LeaderID)
		rf.heartbeatReceived.Store(true)
		rf.voted.Store(false)
		rf.currentTerm.Store(int32(args.LeaderTerm))
		rf.state.Store(FOLLOWER)
		rf.logs = append(rf.logs[:args.PrevLogIdx+1], args.Entries...)
		if args.LeaderCommit > rf.commitIdx {
			rf.commitIdx = min(args.LeaderCommit, len(rf.logs)-1)
		}
		if len(args.Entries) != 0 {
			rf.persist()
		}
		reply.Success = true
	}
}

// example code to send a RequestVote RPC to a server.
// server is the index of the target server in rf.peers[].
// expects RPC arguments in args.
// fills in *reply with RPC reply, so caller should
// pass &reply.
// the types of the args and reply passed to Call() must be
// the same as the types of the arguments declared in the
// handler function (including whether they are pointers).
//
// The labrpc package simulates a lossy network, in which servers
// may be unreachable, and in which requests and replies may be lost.
// Call() sends a request and waits for a reply. If a reply arrives
// within a timeout interval, Call() returns true; otherwise
// Call() returns false. Thus Call() may not return for a while.
// A false return can be caused by a dead server, a live server that
// can't be reached, a lost request, or a lost reply.
//
// Call() is guaranteed to return (perhaps after a delay) *except* if the
// handler function on the server side does not return.  Thus there
// is no need to implement your own timeouts around Call().
//
// look at the comments in ../labrpc/labrpc.go for more details.
//
// if you're having trouble getting RPC to work, check that you've
// capitalized all field names in structs passed over RPC, and
// that the caller passes the address of the reply struct with &, not
// the struct itself.
func (rf *Raft) sendRequestVote(server int, args *RequestVoteArgs, reply *RequestVoteReply) bool {
	ok := rf.peers[server].Call("Raft.RequestVote", args, reply)
	return ok
}
func (rf *Raft) sendAppendEntries(server int, args *AppendEntriesArgs, reply *AppendEntriesReply) bool {
	ok := rf.peers[server].Call("Raft.AppendEntries", args, reply)
	return ok
}

// the service using Raft (e.g. a k/v server) wants to start
// agreement on the next command to be appended to Raft's log. if this
// server isn't the leader, returns false. otherwise start the
// agreement and return immediately. there is no guarantee that this
// command will ever be committed to the Raft log, since the leader
// may fail or lose an election. even if the Raft instance has been killed,
// this function should return gracefully.
//
// the first return value is the index that the command will appear at
// if it's ever committed. the second return value is the current
// term. the third return value is true if this server believes it is
// the leader.
func (rf *Raft) Start(command interface{}) (int, int, bool) {
	index := -1
	term := -1
	isLeader := rf.state.Load() == LEADER
	if isLeader {
		rf.mu.Lock()
		DPrintf("*newLog* New Log added to LeaderID: %d, LogValue: %v", rf.me, command)
		index = len(rf.logs)
		term = int(rf.currentTerm.Load())
		rf.logs = append(rf.logs, Entry{Term: int(rf.currentTerm.Load()), Command: command})
		rf.matchIdx[rf.me] = index
		rf.nextIdx[rf.me] = index + 1
		rf.persist()
		rf.mu.Unlock()
	}

	return index, term, isLeader
}

// the tester doesn't halt goroutines created by Raft after each test,
// but it does call the Kill() method. your code can use killed() to
// check whether Kill() has been called. the use of atomic avoids the
// need for a lock.
//
// the issue is that long-running goroutines use memory and may chew
// up CPU time, perhaps causing later tests to fail and generating
// confusing debug output. any goroutine with a long-running loop
// should call killed() to check whether it should stop.
func (rf *Raft) Kill() {
	atomic.StoreInt32(&rf.dead, 1)
	// Your code here, if desired.
}

func (rf *Raft) killed() bool {
	z := atomic.LoadInt32(&rf.dead)
	return z == 1
}

func (rf *Raft) ticker() {
	for !rf.killed() {
		// println("tick")

		// (2A)
		switch rf.state.Load() {
		case FOLLOWER:
			rf.followerTicker()
		case CANDIDATE:
			rf.startElection()
		case LEADER:
			rf.leaderTicker()
		}
	}
}

func (rf *Raft) leaderTicker() {
	ms := 45
	DPrintf("*Append* append from leader ID: %d", rf.me)
	startTerm := int(rf.currentTerm.Load())
	for i := 0; i < len(rf.peers); i++ {
		if i == rf.me {
			continue
		}
		if startTerm != int(rf.currentTerm.Load()) {
			return
		}

		go rf.appendEntriesResponseHandler(i, startTerm)
	}
	time.Sleep(time.Duration(ms) * time.Millisecond)
}
func (rf *Raft) appendEntriesResponseHandler(peerId int, startTerm int) {
	rf.mu.Lock()
	prevLogIdx := min(rf.nextIdx[peerId]-1, len(rf.logs)-1)
	prevLogTerm := 0
	prevLogTerm = rf.logs[prevLogIdx].Term
	reply := AppendEntriesReply{}
	args := AppendEntriesArgs{LeaderTerm: startTerm, LeaderCommit: rf.commitIdx, LeaderID: rf.me, PrevLogIdx: prevLogIdx, PrevLogTerm: prevLogTerm, Entries: rf.logs[prevLogIdx+1:]}
	rf.mu.Unlock()
	ok := rf.sendAppendEntries(peerId, &args, &reply)
	for ok && !reply.Success {
		if reply.FollowerTerm > int(rf.currentTerm.Load()) {
			rf.state.Store(FOLLOWER)
			rf.currentTerm.Store(int32(reply.FollowerTerm))
			return
		}
		prevLogIdx--
		for prevLogIdx > 0 && rf.logs[prevLogIdx].Term > reply.FollowerLastLogTerm {
			prevLogIdx--
		}
		rf.mu.Lock()
		prevLogTerm = rf.logs[prevLogIdx].Term
		reply = AppendEntriesReply{}
		args = AppendEntriesArgs{LeaderTerm: startTerm, LeaderCommit: rf.commitIdx, LeaderID: rf.me, PrevLogIdx: prevLogIdx, PrevLogTerm: prevLogTerm, Entries: rf.logs[prevLogIdx+1:]}
		rf.mu.Unlock()
		ok = rf.sendAppendEntries(peerId, &args, &reply)
		if prevLogIdx == 0 {
			break
		}
	}
	if reply.Success {
		rf.mu.Lock()
		rf.nextIdx[peerId] = len(rf.logs)
		rf.matchIdx[peerId] = len(rf.logs) - 1
		DPrintf("*matchIdx* changed on idx: %d to val: %d", peerId, len(rf.logs))
		rf.mu.Unlock()
	}
}

func (rf *Raft) followerTicker() {
	ms := 200 + (rand.Int63() % 350)
	n := int(ms / 10)
	for i := 0; i < n; i++ {
		if rf.heartbeatReceived.Swap(false) {
			i = 0
		}
		time.Sleep(time.Duration(10) * time.Millisecond)
	}
	rf.mu.Lock()
	defer rf.mu.Unlock()
	if !rf.voted.Swap(true) {
		rf.state.Store(CANDIDATE)
		rf.currentTerm.Add(1)
	}
}

func (rf *Raft) startElection() {
	DPrintf("*election* Candidate: %d, TermNum: %d", rf.me, rf.currentTerm.Load())
	votedYes := 1
	votedNo := 0
	currentTerm := int(rf.currentTerm.Load())
	channel := make(chan *RequestVoteReply)
	for i := 0; i < len(rf.peers); i++ {
		if i == rf.me {
			continue
		}
		lastLogIdx := len(rf.logs) - 1
		lastLogTerm := 0
		if lastLogIdx != 0 {
			lastLogTerm = rf.logs[lastLogIdx].Term
		}
		args := RequestVoteArgs{CandidateID: rf.me, Term: currentTerm, LastLogIdx: lastLogIdx, LastLogTerm: lastLogTerm}
		reply := RequestVoteReply{}
		go rf.sendRequestVoteCh(channel, i, &args, &reply)
	}
	for votedYes <= len(rf.peers)/2 && votedNo < len(rf.peers)/2 && !rf.heartbeatReceived.Load() {
		reply := <-channel
		DPrintf("*election* voterTerm: %d, candidateTerm:%d candidate: %d, res: %v", reply.VoterTerm, rf.currentTerm.Load(), rf.me, reply.VotedYes)
		if reply.VotedYes {
			votedYes++
		} else {
			votedNo++
		}
		voterTerm := reply.VoterTerm
		if currentTerm < voterTerm {

			rf.currentTerm.Store(int32(voterTerm))
			rf.voted.Store(false)
			rf.state.Store(FOLLOWER)
			return
		}
	}

	rf.mu.Lock()
	defer rf.mu.Unlock()
	if int(rf.currentTerm.Load()) == currentTerm && votedYes > len(rf.peers)/2 {
		DPrintf("*election* Became Leader ID: %d", rf.me)
		rf.state.Store(LEADER)
		// rf.logs = rf.logs[:rf.commitIdx+1]
		rf.nextIdx = make([]int, len(rf.peers))
		rf.matchIdx = make([]int, len(rf.peers))
		for i := range rf.nextIdx {
			rf.nextIdx[i] = len(rf.logs)
			rf.matchIdx[i] = 0
		}
		go rf.commitChecker()
		// println("Leader Term:", rf.currentTerm.Load(), "Id:", rf.me, "Yes:", votedYes)
	} else {
		DPrintf("*election* Didn't Became Leader ID: %d", rf.me)
		rf.state.Store(FOLLOWER)
	}
	rf.voted.Store(false)

}

func (rf *Raft) commitChecker() {
	ms := 35
	n := rf.commitIdx + 1
	for !rf.killed() && rf.state.Load() == LEADER {
		rf.mu.Lock()
		counter := 0
		for i := range rf.nextIdx {
			if rf.matchIdx[i] >= n {
				counter++
			}
		}
		if counter > len(rf.peers)/2 {
			if rf.logs[n].Term == int(rf.currentTerm.Load()) {
				DPrintf("*commit* updated commit = %d, leaderID: %d", n, rf.me)
				rf.commitIdx = n
			}
			n++
		} else {
			DPrintf("*commit* Not enough counter: %d, peerID: %d", counter, rf.me)
		}
		rf.mu.Unlock()
		time.Sleep(time.Duration(ms) * time.Millisecond)
	}
}

func (rf *Raft) sendRequestVoteCh(channel chan<- *RequestVoteReply, server int, args *RequestVoteArgs, reply *RequestVoteReply) {
	rf.sendRequestVote(server, args, reply)
	channel <- reply
}

func (rf *Raft) applyMsgTicker() {
	ms := 10
	for !rf.killed() {
		time.Sleep(time.Duration(ms) * time.Millisecond)
		rf.mu.Lock()
		if rf.commitIdx > int(rf.lastApplied.Load()) {
			rf.lastApplied.Add(1)
			lastApplied := rf.lastApplied.Load()
			DPrintf("*apply* applying: %v isLeader: %v peerID: %v logLen:%v\n", rf.logs[lastApplied].Command, rf.state.Load() == LEADER, rf.me, len(rf.logs))
			rf.applyCh <- ApplyMsg{Command: rf.logs[lastApplied].Command, CommandValid: true, CommandIndex: int(lastApplied)}
		}
		rf.mu.Unlock()
	}
}

// the service or tester wants to create a Raft server. the ports
// of all the Raft servers (including this one) are in peers[]. this
// server's port is peers[me]. all the servers' peers[] arrays
// have the same order. persister is a place for this server to
// save its persistent state, and also initially holds the most
// recent saved state, if any. applyCh is a channel on which the
// tester or service expects Raft to send ApplyMsg messages.
// Make() must return quickly, so it should start goroutines
// for any long-running work.
func Make(peers []*labrpc.ClientEnd, me int,
	persister *Persister, applyCh chan ApplyMsg) *Raft {
	rf := &Raft{}
	rf.peers = peers
	rf.persister = persister
	rf.me = me

	// Your initialization code here (2A, 2B, 2C).
	//(2A)
	rf.currentTerm.Store(0)
	rf.voted.Store(false)
	rf.logs = []Entry{{}}
	rf.heartbeatReceived.Store(false)
	rf.state.Store(FOLLOWER)
	rf.commitIdx = 0
	rf.lastApplied.Store(0)
	rf.applyCh = applyCh

	// initialize from state persisted before a crash
	rf.readPersist(persister.ReadRaftState())
	DPrintf("*persist* after Loading from persister: %v", rf.logs)

	// start ticker goroutine to start elections
	go rf.ticker()
	go rf.applyMsgTicker()

	return rf
}
